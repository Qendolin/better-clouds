plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
}

loom {
	accessWidenerPath = file("src/main/resources/betterclouds.accesswidener")
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
if(project.version_type != "RELEASE") {
	version += "-" + project.version_type
}
version += "+" + project.minecraft_version
if(project.version_type != "RELEASE") {
	version += "." + 'git rev-parse --short HEAD'.execute().text.trim()
}
group = project.maven_group

repositories {
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/releases/"
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
	maven { url "https://maven.shedaniel.me/" }
	maven {
		name 'Xander Maven'
		url 'https://maven.isxander.dev/releases'
	}
	maven { url "https://oss.sonatype.org/content/repositories/snapshots" } // for com.twelvemonkeys.imageio
	maven { url "https://maven.quiltmc.org/repository/release" } // for org.quiltmc.parsers
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	modImplementation("dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}")
    compileOnly files("libraries/DistantHorizonsApi-3.0.0-nightly-377f7d23.jar")

	modCompileOnly "maven.modrinth:sodium-extra:${project.sodium_extra_version}"
	modCompileOnly "maven.modrinth:iris:${project.iris_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}

	exclude("assets/**/*.ase")
	exclude("assets/**/*.xcf")
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

modrinth  { // Make sure it runs after build!
	def secrets = new Properties()

	file("./secrets.properties").withInputStream {
		stream -> secrets.load(stream)
	}

	// An environment property called MODRINTH that is your token, set via Gradle CLI, GitHub Actions, Idea Run Configuration, or other
	token = secrets.MODRINTH
	projectId = '5srFLIaK'
	versionNumber = "${project.mod_version}+${project.minecraft_version}-${project.version_type.substring(0, 1)}" // Will fail if Modrinth has this version already
	versionName = "${project.mod_version} for ${project.minecraft_version} ${project.version_type}"
	versionType = Enum.valueOf(com.modrinth.minotaur.request.VersionType.class, "${project.version_type}").name()
	// On fabric, use 'remapJar' instead of 'jar'
	uploadFile = remapJar  // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
	gameVersions = ['1.20.2']
	loaders = ['fabric']
	dependencies { // A special DSL for creating dependencies
		// scope.type
		// The scope can be `required`, `optional`, `incompatible`, or `embedded`
		// The type can either be `project` or `version`
		required.project "fabric-api"
		required.version "yacl", "${project.yacl_version}-fabric"
		optional.project "sodium"
		optional.project "iris"
		optional.project "modmenu"
		incompatible.project "vulkanmod"
	}
}
